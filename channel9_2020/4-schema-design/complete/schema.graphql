schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"The node interface is implemented by entities that have a gloabl unique identifier."
interface Node {
  id: ID!
}

type AddSessionPayload {
  clientMutationId: String
  errors: [UserError!]!
  session: Session
}

type AddSpeakerPayload {
  clientMutationId: String
  errors: [UserError!]!
  speaker: Speaker
}

type AddTrackPayload {
  clientMutationId: String
  errors: [UserError!]!
  track: Track
}

type Attendee implements Node {
  emailAddress: String
  firstName: String!
  id: ID!
  lastName: String!
  sessions: [Session!]!
  userName: String!
}

"A connection to a list of items."
type AttendeeConnection {
  "A list of edges."
  edges: [AttendeeEdge!]
  "A flattened list of the nodes."
  nodes: [Attendee]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}

"An edge in a connection."
type AttendeeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Attendee
}

type CheckInAttendeePayload {
  attendee: Session
  clientMutationId: String
  errors: [UserError!]!
}

type ModifySpeakerPayload {
  clientMutationId: String
  errors: [UserError!]!
  speaker: Speaker
}

type Mutation {
  addSession(input: AddSessionInput!): AddSessionPayload!
  addSpeaker(input: AddSpeakerInput!): AddSpeakerPayload!
  addTrack(input: AddTrackInput!): AddTrackPayload!
  checkInAttendee(input: CheckInAttendeeInput!): CheckInAttendeePayload!
  modifySpeaker(input: ModifySpeakerInput!): ModifySpeakerPayload!
  registerAttendee(input: RegisterAttendeeInput!): RegisterAttendeePayload!
  renameTrack(input: RenameTrackInput!): RenameTrackPayload!
  scheduleSession(input: ScheduleSessionInput!): ScheduleSessionPayload!
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

type Query {
  attendeeById(id: ID!): Attendee!
  attendeesAsync(after: String before: String first: PaginationAmount last: PaginationAmount): AttendeeConnection
  attendeesById(ids: [ID]): [Attendee!]!
  node(id: ID!): Node
  sessionById(id: ID!): Session!
  sessions(after: String before: String first: PaginationAmount last: PaginationAmount order_by: SessionSort where: SessionFilter): SessionConnection
  sessionsById(ids: [ID]): [Session!]!
  speakerById(id: ID!): Speaker!
  speakers(after: String before: String first: PaginationAmount last: PaginationAmount): SpeakerConnection
  speakersById(ids: [ID]): [Speaker!]!
  trackById(id: ID!): Track!
  trackByName(name: String!): Track!
  trackByNames(names: [String!]!): [Track!]!
  tracks(after: String before: String first: PaginationAmount last: PaginationAmount): TrackConnection
}

type RegisterAttendeePayload {
  attendee: Attendee
  clientMutationId: String
  errors: [UserError!]!
}

type RenameTrackPayload {
  clientMutationId: String
  errors: [UserError!]!
  track: Track
}

type ScheduleSessionPayload {
  clientMutationId: String
  errors: [UserError!]!
  session: Session
  speakers: [Speaker!]
  track: Track
}

type Session implements Node {
  abstract: String
  attendees: [Attendee!]!
  duration: TimeSpan!
  endTime: DateTime
  id: ID!
  speakers: [Speaker!]!
  startTime: DateTime
  title: String!
  track: Track
  trackId: ID
}

type SessionAttendeeCheckIn {
  attendee: Attendee!
  attendeeId: ID!
  checkInCount: Int!
  sessionId: ID!
}

"A connection to a list of items."
type SessionConnection {
  "A list of edges."
  edges: [SessionEdge!]
  "A flattened list of the nodes."
  nodes: [Session]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}

"An edge in a connection."
type SessionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Session
}

type Speaker implements Node {
  bio: String
  id: ID!
  name: String!
  sessions: [Session!]!
  webSite: String
}

"A connection to a list of items."
type SpeakerConnection {
  "A list of edges."
  edges: [SpeakerEdge!]
  "A flattened list of the nodes."
  nodes: [Speaker]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}

"An edge in a connection."
type SpeakerEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Speaker
}

type Subscription {
  onAttendeeCheckedInAsync(sessionId: ID!): SessionAttendeeCheckIn!
  onSessionScheduled: Session!
}

type Track implements Node {
  id: ID!
  name: String!
  sessions: [Session!]!
}

"A connection to a list of items."
type TrackConnection {
  "A list of edges."
  edges: [TrackEdge!]
  "A flattened list of the nodes."
  nodes: [Track]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}

"An edge in a connection."
type TrackEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Track
}

type UserError {
  code: String!
  message: String!
}

input AddSessionInput {
  abstract: String
  clientMutationId: String
  speakerIds: [ID]
  title: String!
}

input AddSpeakerInput {
  bio: String
  clientMutationId: String
  name: String!
  webSite: String
}

input AddTrackInput {
  clientMutationId: String
  name: String!
}

input CheckInAttendeeInput {
  attendeeId: ID!
  clientMutationId: String
  sessionId: ID!
}

input ModifySpeakerInput {
  bio: String
  clientMutationId: String
  id: ID!
  name: String
  webSite: String
}

input RegisterAttendeeInput {
  clientMutationId: String
  emailAddress: String!
  firstName: String!
  lastName: String!
  userName: String!
}

input RenameTrackInput {
  clientMutationId: String
  id: ID!
  name: String!
}

input ScheduleSessionInput {
  clientMutationId: String
  endTime: DateTime!
  sessionId: ID!
  startTime: DateTime!
  trackId: ID!
}

input SessionFilter {
  abstract: String
  abstract_contains: String
  abstract_ends_with: String
  abstract_in: [String]
  abstract_not: String
  abstract_not_contains: String
  abstract_not_ends_with: String
  abstract_not_in: [String]
  abstract_not_starts_with: String
  abstract_starts_with: String
  AND: [SessionFilter!]
  duration: TimeSpan
  duration_gt: TimeSpan
  duration_gte: TimeSpan
  duration_in: [TimeSpan!]
  duration_lt: TimeSpan
  duration_lte: TimeSpan
  duration_not: TimeSpan
  duration_not_gt: TimeSpan
  duration_not_gte: TimeSpan
  duration_not_in: [TimeSpan!]
  duration_not_lt: TimeSpan
  duration_not_lte: TimeSpan
  endTime: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  endTime_in: [DateTime]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_not: DateTime
  endTime_not_gt: DateTime
  endTime_not_gte: DateTime
  endTime_not_in: [DateTime]
  endTime_not_lt: DateTime
  endTime_not_lte: DateTime
  OR: [SessionFilter!]
  startTime: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  startTime_in: [DateTime]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_not: DateTime
  startTime_not_gt: DateTime
  startTime_not_gte: DateTime
  startTime_not_in: [DateTime]
  startTime_not_lt: DateTime
  startTime_not_lte: DateTime
  title: String
  title_contains: String
  title_ends_with: String
  title_in: [String!]
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
}

input SessionSort {
  abstract: SortOperationKind
  duration: SortOperationKind
  endTime: SortOperationKind
  id: SortOperationKind
  startTime: SortOperationKind
  title: SortOperationKind
  trackId: SortOperationKind
}

enum SortOperationKind {
  ASC
  DESC
}

"The `Boolean` scalar type represents `true` or `false`."
scalar Boolean

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID."
scalar ID

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

scalar PaginationAmount

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String

scalar TimeSpan